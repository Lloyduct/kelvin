AWSTemplateFormatVersion: '2010-09-09'
Description: 'EC2 instances monitoring'
Parameters:
  InstanceIds:
    Description: 'The instance IDs of up to ten EC2 instances that you want to monitor.'
    Type: 'List<AWS::EC2::Instance::Id>'
  InstanceTypes:
    Description: 'The instance types of up to ten EC2 instances that you want to monitor.'
    Type: 'List<String>'
  CPUUtilizationThreshold:
    Description: 'The maximum percentage of CPU utilization (set to -1 to disable).'
    Type: Number
    Default: 80
    MinValue: -1
    MaxValue: 100
  NetworkUtilizationThreshold:
    Description: 'The maximum percentage of network utilization (set to -1 to disable).'
    Type: Number
    Default: 80
    MinValue: -1
    MaxValue: 100
  MemoryUtilPercentThreshold:
    Description: 'The maximum percentage of memory utilization (set to -1 to disable).'
    Type: Number
    Default: 90
    MinValue: -1
    MaxValue: 100
  DiskUsedPercentThreshold:
    Description: 'The maximum percentage of a single filesystem utilization (set to -1 to disable).'
    Type: Number
    Default: 10
    MinValue: -1
    MaxValue: 100
  AlarmsEmail:
    Description: AlarmsEmail for the SNS Topic
    Type: String
    
Conditions:
  IsEmailProvided: !Not [!Equals [!Ref AlarmsEmail, ""]]
Resources:
  ##########################################################################
  #                                 TOPIC                                  #
  ##########################################################################
  Topic:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: "EC2-Alerts"
      TopicName: "EC2-Alerts"

  SNSSubscription:
    Type: AWS::SNS::Subscription
    Condition: IsEmailProvided
    Properties:
      TopicArn: !Ref Topic
      Endpoint: !Ref AlarmsEmail
      Protocol: "email"
      Region: !Ref AWS::Region


  TopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F18
            reason: "This is okay, since the action is non-critical and we do have micro segmented account setups. Therefore each iam role is allowed to publish SNS warnings."
    Properties:
      PolicyDocument:
        Id: Id1
        Version: '2012-10-17'
        Statement:
        - Sid: Sid1
          Effect: Allow
          Principal:
            Service: 'events.amazonaws.com' # Allow CloudWatch Events
          Action: 'sns:Publish'
          Resource: !Ref Topic
        - Sid: Sid2
          Effect: Allow
          Principal:
            AWS: '*' # Allow CloudWatch Alarms
          Action: 'sns:Publish'
          Resource: !Ref Topic
          Condition:
            StringEquals:
              'AWS:SourceOwner': !Ref 'AWS::AccountId'
      Topics:
      - !Ref Topic
  ##########################################################################
  #                                 ALARMS                                 #
  ##########################################################################
  Instance0AlarmStack:
    DependsOn: TopicPolicy
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Parameters:
        Topic: !Ref Topic
        InstanceId: !Select [0, !Ref InstanceIds]
        CPUUtilizationThreshold: !Ref CPUUtilizationThreshold
        NetworkUtilizationThreshold: !Ref NetworkUtilizationThreshold
        MemoryUtilPercentThreshold: !Ref MemoryUtilPercentThreshold
        DiskUsedPercentThreshold: !Ref DiskUsedPercentThreshold
        InstanceType: !Select [0, !Ref InstanceTypes]
      TemplateURL: ec2_mon_alarms.yaml
  
  ##########################################################################
  #                                 DASHBOARD                              #
  ##########################################################################
  ObservabilityDashboard:
    Type: "AWS::CloudWatch::Dashboard"
    Properties:
      DashboardName: "EC2-Alerts"
      #Note: Add an additional Widget if you have more than one instance
      DashboardBody: !Sub |
        {
            "start": "-PT12H",
            "widgets": [
                {
                    "height": 6,
                    "width": 12,
                    "y": 0,
                    "x": 0,
                    "type": "alarm",
                    "properties": {
                        "title": "EC2 Instance Alarms",
                        "alarms": [
                            ${Instance0AlarmStack.Outputs.AlarmsArray}
                        ]
                    }
                }
                ]
        }

  MetricsDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: "EC2-Instance-Metrics"
      DashboardBody: !Sub 
      - |
        {
            "widgets": [
                {
                    "type":"metric",
                    "width":18,
                    "height":9,
                    "properties":{
                        "metrics":[
                            [ { "expression": "SEARCH('{AWS/EC2,InstanceId} MetricName=\"CPUUtilization\" ${main_instance}', 'Average', 300)", "id": "a1" } ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region":"eu-central-1",
                        "title":"EC2 Instance CPU Utilization (%)"
                    }
                },
                {
                    "type":"metric",
                    "width":18,
                    "height":9,
                    "properties":{
                        "metrics":[
                            [ { "expression": "SEARCH('{AWS/EC2,InstanceId} MetricName=\"NetworkIn\" ${main_instance}', 'Average', 300)", "id": "b1" } ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region":"eu-central-1",
                        "title":"EC2 Instance Network In (bytes/min)"
                    }
                },
                {
                    "type":"metric",
                    "width":18,
                    "height":9,
                    "properties":{
                        "metrics":[
                            [ { "expression": "SEARCH('{AWS/EC2,InstanceId} MetricName=\"NetworkOut\" ${main_instance}', 'Average', 300)", "id": "c1" } ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region":"eu-central-1",
                        "title":"EC2 Instance Network Out (bytes/min)"
                    }
                },
                {
                    "type":"metric",
                    "width":18,
                    "height":9,
                    "properties":{
                        "metrics":[
                            [ { "expression": "SEARCH('{AWS/EC2,InstanceId} MetricName=\"Memory % Committed Bytes In Use\" ${main_instance}', 'Average', 300)", "id": "d1" } ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region":"eu-central-1",
                        "title":"EC2 Instance Memory Usage (%)"
                    }
                },
                {
                    "type":"metric",
                    "width":18,
                    "height":9,
                    "properties":{
                        "metrics":[
                            [ { "expression": "SEARCH('{AWS/EC2,InstanceId} MetricName=\"LogicalDisk % Free Space\" ${main_instance}', 'Average', 300)", "id": "e1" } ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region":"eu-central-1",
                        "title":"EC2 Instance Free Disk Space (%)"
                    }
                }
              ]
        }
      - main_instance: !Select [0, !Ref InstanceIds]

  ##########################################################################
  #                                 OUTPUTS                                #
  ##########################################################################
Outputs:
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  StackVersion:
    Description: 'Stack version.'
    Value: '1.0.0'